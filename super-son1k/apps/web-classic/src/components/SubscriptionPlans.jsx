/**
 * Subscription Plans - Componente de planes de suscripci√≥n
 * Super-Son1k Web Classic
 */

import React, { useState } from 'react';
import useTheme from '../hooks/useTheme';
import useAnimations from '../hooks/useAnimations';
import './SubscriptionPlans.css';

const SubscriptionPlans = ({ currentPlan = 'free', onUpgrade }) => {
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  
  const { theme } = useTheme();
  const { 
    createAnimatedRef, 
    getAnimationClass, 
    pulse, 
    glow,
    createParticles 
  } = useAnimations();

  const plans = [
    {
      id: 'free',
      name: 'Free',
      icon: 'üÜì',
      price: '$0',
      period: '/mes',
      description: 'Perfecto para empezar',
      color: '#6b7280',
      features: [
        'üéµ Generaci√≥n b√°sica de m√∫sica',
        'üìù Generaci√≥n de letras',
        'üé§ 5 generaciones por d√≠a',
        'üì• Descarga de tracks',
        'üì§ Compartir contenido',
        'üë• Acceso a comunidad',
        'üìä Analytics b√°sicos',
        'üíæ 0.5GB de almacenamiento'
      ],
      limits: {
        generationsPerDay: 5,
        tracksPerDay: 3,
        apiCallsPerHour: 50,
        storageGB: 0.5
      },
      popular: false
    },
    {
      id: 'premium',
      name: 'Premium',
      icon: '‚≠ê',
      price: '$19',
      period: '/mes',
      description: 'Para creadores serios',
      color: '#f59e0b',
      features: [
        'üéµ Generaci√≥n avanzada de m√∫sica',
        'üìù Generaci√≥n de letras con IA',
        'üé§ 50 generaciones por d√≠a',
        'üé® Estilos personalizados',
        'üìä Analytics mejorados',
        'üë• Colaboraci√≥n en equipo',
        '‚ö° Cola de prioridad',
        'üì• Exportaci√≥n mejorada',
        'üíæ 5GB de almacenamiento',
        'üéØ Soporte prioritario'
      ],
      limits: {
        generationsPerDay: 50,
        tracksPerDay: 25,
        apiCallsPerHour: 500,
        storageGB: 5
      },
      popular: true
    },
    {
      id: 'pro',
      name: 'Pro',
      icon: 'üöÄ',
      price: '$49',
      period: '/mes',
      description: 'Para profesionales',
      color: '#3b82f6',
      features: [
        'üéµ Generaci√≥n ilimitada de m√∫sica',
        'üìù Generaci√≥n de letras con IA',
        'üé§ Covers con SunoAPI',
        'üé® Estilos personalizados',
        'üìä Analytics avanzados',
        'üë• Colaboraci√≥n en equipo',
        '‚ö° Cola de prioridad',
        'üì• Exportaci√≥n avanzada',
        'üîå Acceso a API',
        'üíæ 25GB de almacenamiento',
        'üéØ Soporte prioritario',
        'üìà Dashboard de m√©tricas',
        'üéµ Top Tracks integrado'
      ],
      limits: {
        generationsPerDay: 200,
        tracksPerDay: 100,
        apiCallsPerHour: 2000,
        storageGB: 25
      },
      popular: false
    },
    {
      id: 'enterprise',
      name: 'Enterprise',
      icon: 'üè¢',
      price: 'Custom',
      period: '',
      description: 'Para empresas',
      color: '#8b5cf6',
      features: [
        'üéµ Generaci√≥n ilimitada',
        'üìù IA avanzada para letras',
        'üé§ Covers profesionales',
        'üé® Estilos personalizados',
        'üìä Analytics empresariales',
        'üë• Colaboraci√≥n ilimitada',
        '‚ö° Procesamiento prioritario',
        'üì• Exportaci√≥n empresarial',
        'üîå API completa',
        'üíæ Almacenamiento ilimitado',
        'üéØ Soporte dedicado',
        'üìà Dashboard completo',
        'üéµ Top Tracks premium',
        'üè∑Ô∏è White label',
        'üîß Integraciones personalizadas',
        'üìã SLA garantizado',
        'üöÄ Despliegue personalizado'
      ],
      limits: {
        generationsPerDay: -1, // Ilimitado
        tracksPerDay: -1,
        apiCallsPerHour: -1,
        storageGB: -1
      },
      popular: false
    }
  ];

  const handleUpgrade = async (planId) => {
    setIsLoading(true);
    setSelectedPlan(planId);
    
    try {
      // Simular proceso de upgrade
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      if (onUpgrade) {
        onUpgrade(planId);
      }
      
      pulse('upgrade-success');
      createParticles('upgrade-particles', 20);
      
    } catch (error) {
      console.error('Error upgrading plan:', error);
    } finally {
      setIsLoading(false);
      setSelectedPlan(null);
    }
  };

  const getPlanIcon = (planId) => {
    const plan = plans.find(p => p.id === planId);
    return plan ? plan.icon : 'üéµ';
  };

  const getPlanColor = (planId) => {
    const plan = plans.find(p => p.id === planId);
    return plan ? plan.color : '#6b7280';
  };

  return (
    <div className="subscription-plans" id="subscription-plans">
      <div className="particles-container" id="upgrade-particles"></div>
      
      {/* Header */}
      <div 
        className={`plans-header ${getAnimationClass('plans-header', 'fadeInDown')}`}
        ref={createAnimatedRef('fadeInDown')}
      >
        <h2>üöÄ Planes de Suscripci√≥n</h2>
        <p>Elige el plan perfecto para tu creatividad musical</p>
        <div className="current-plan">
          <span className="current-plan-label">Plan actual:</span>
          <span 
            className="current-plan-name"
            style={{ color: getPlanColor(currentPlan) }}
          >
            {getPlanIcon(currentPlan)} {plans.find(p => p.id === currentPlan)?.name || 'Free'}
          </span>
        </div>
      </div>

      {/* Plans Grid */}
      <div 
        className={`plans-grid ${getAnimationClass('plans-grid', 'fadeInUp')}`}
        ref={createAnimatedRef('fadeInUp')}
      >
        {plans.map((plan, index) => (
          <div 
            key={plan.id}
            className={`plan-card ${plan.popular ? 'popular' : ''} ${currentPlan === plan.id ? 'current' : ''} ${getAnimationClass(`plan-card-${index}`, 'scaleIn')}`}
            style={{ animationDelay: `${index * 0.1}s` }}
          >
            {plan.popular && (
              <div className="popular-badge">
                ‚≠ê M√°s Popular
              </div>
            )}
            
            {currentPlan === plan.id && (
              <div className="current-badge">
                ‚úÖ Plan Actual
              </div>
            )}

            <div className="plan-header">
              <div className="plan-icon" style={{ color: plan.color }}>
                {plan.icon}
              </div>
              <h3 className="plan-name">{plan.name}</h3>
              <p className="plan-description">{plan.description}</p>
            </div>

            <div className="plan-pricing">
              <div className="price">
                <span className="price-amount">{plan.price}</span>
                <span className="price-period">{plan.period}</span>
              </div>
            </div>

            <div className="plan-features">
              <h4>‚ú® Caracter√≠sticas</h4>
              <ul className="features-list">
                {plan.features.map((feature, featureIndex) => (
                  <li key={featureIndex} className="feature-item">
                    {feature}
                  </li>
                ))}
              </ul>
            </div>

            <div className="plan-limits">
              <h4>üìä L√≠mites</h4>
              <div className="limits-grid">
                <div className="limit-item">
                  <span className="limit-label">Generaciones/d√≠a:</span>
                  <span className="limit-value">
                    {plan.limits.generationsPerDay === -1 ? '‚àû' : plan.limits.generationsPerDay}
                  </span>
                </div>
                <div className="limit-item">
                  <span className="limit-label">Tracks/d√≠a:</span>
                  <span className="limit-value">
                    {plan.limits.tracksPerDay === -1 ? '‚àû' : plan.limits.tracksPerDay}
                  </span>
                </div>
                <div className="limit-item">
                  <span className="limit-label">API calls/hora:</span>
                  <span className="limit-value">
                    {plan.limits.apiCallsPerHour === -1 ? '‚àû' : plan.limits.apiCallsPerHour}
                  </span>
                </div>
                <div className="limit-item">
                  <span className="limit-label">Almacenamiento:</span>
                  <span className="limit-value">
                    {plan.limits.storageGB === -1 ? '‚àû' : `${plan.limits.storageGB}GB`}
                  </span>
                </div>
              </div>
            </div>

            <div className="plan-actions">
              {currentPlan === plan.id ? (
                <button className="current-plan-btn" disabled>
                  ‚úÖ Plan Actual
                </button>
              ) : (
                <button
                  onClick={() => handleUpgrade(plan.id)}
                  disabled={isLoading && selectedPlan === plan.id}
                  className={`upgrade-btn ${isLoading && selectedPlan === plan.id ? 'loading' : ''}`}
                  style={{ backgroundColor: plan.color }}
                >
                  {isLoading && selectedPlan === plan.id ? (
                    <>
                      <span className="loading-spinner"></span>
                      Procesando...
                    </>
                  ) : (
                    <>
                      üöÄ {plan.id === 'enterprise' ? 'Contactar' : 'Upgrade'}
                      <span className="btn-glow"></span>
                    </>
                  )}
                </button>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* Tools Comparison */}
      <div 
        className={`tools-comparison ${getAnimationClass('tools-comparison', 'fadeInUp')}`}
        ref={createAnimatedRef('fadeInUp')}
      >
        <h3>üõ†Ô∏è Herramientas Incluidas</h3>
        <div className="comparison-table">
          <div className="comparison-header">
            <div className="tool-column">Herramienta</div>
            <div className="plan-column">Free</div>
            <div className="plan-column">Premium</div>
            <div className="plan-column">Pro</div>
            <div className="plan-column">Enterprise</div>
          </div>
          
          <div className="comparison-row">
            <div className="tool-column">üéµ The Generator</div>
            <div className="plan-column">‚úÖ B√°sico</div>
            <div className="plan-column">‚úÖ Avanzado</div>
            <div className="plan-column">‚úÖ Completo</div>
            <div className="plan-column">‚úÖ Ilimitado</div>
          </div>
          
          <div className="comparison-row">
            <div className="tool-column">ü§ñ Pixel Console</div>
            <div className="plan-column">‚ùå</div>
            <div className="plan-column">‚úÖ</div>
            <div className="plan-column">‚úÖ</div>
            <div className="plan-column">‚úÖ</div>
          </div>
          
          <div className="comparison-row">
            <div className="tool-column">üì± Nova Post Pilot</div>
            <div className="plan-column">‚ùå</div>
            <div className="plan-column">‚úÖ</div>
            <div className="plan-column">‚úÖ</div>
            <div className="plan-column">‚úÖ</div>
          </div>
          
          <div className="comparison-row">
            <div className="tool-column">üé§ Clone Station</div>
            <div className="plan-column">‚ùå</div>
            <div className="plan-column">‚úÖ</div>
            <div className="plan-column">‚úÖ</div>
            <div className="plan-column">‚úÖ</div>
          </div>
          
          <div className="comparison-row">
            <div className="tool-column">üéµ Ghost Studio</div>
            <div className="plan-column">‚ùå</div>
            <div className="plan-column">‚úÖ</div>
            <div className="plan-column">‚úÖ</div>
            <div className="plan-column">‚úÖ</div>
          </div>
          
          <div className="comparison-row">
            <div className="tool-column">üìä Dashboard</div>
            <div className="plan-column">‚ùå</div>
            <div className="plan-column">‚úÖ</div>
            <div className="plan-column">‚úÖ</div>
            <div className="plan-column">‚úÖ</div>
          </div>
          
          <div className="comparison-row">
            <div className="tool-column">üéµ Top Tracks</div>
            <div className="plan-column">‚úÖ B√°sico</div>
            <div className="plan-column">‚úÖ Completo</div>
            <div className="plan-column">‚úÖ Premium</div>
            <div className="plan-column">‚úÖ Enterprise</div>
          </div>
        </div>
      </div>

      {/* FAQ */}
      <div 
        className={`faq-section ${getAnimationClass('faq-section', 'fadeInUp')}`}
        ref={createAnimatedRef('fadeInUp')}
      >
        <h3>‚ùì Preguntas Frecuentes</h3>
        <div className="faq-list">
          <div className="faq-item">
            <h4>¬øPuedo cambiar de plan en cualquier momento?</h4>
            <p>S√≠, puedes cambiar de plan en cualquier momento. Los cambios se aplicar√°n inmediatamente y se prorratear√° el costo.</p>
          </div>
          <div className="faq-item">
            <h4>¬øQu√© pasa si excedo mis l√≠mites?</h4>
            <p>Si excedes tus l√≠mites, podr√°s continuar usando las herramientas b√°sicas. Te notificaremos cuando te acerques a tus l√≠mites.</p>
          </div>
          <div className="faq-item">
            <h4>¬øLos tracks generados son m√≠os?</h4>
            <p>S√≠, todos los tracks que generes son completamente tuyos. Puedes usarlos comercialmente sin restricciones.</p>
          </div>
          <div className="faq-item">
            <h4>¬øHay descuentos anuales?</h4>
            <p>S√≠, ofrecemos descuentos del 20% en planes anuales. Contacta con nuestro equipo para m√°s informaci√≥n.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SubscriptionPlans;